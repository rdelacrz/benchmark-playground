/*
 * This source file was generated by the Gradle 'init' task
 */
package org.benchmarkplayground;

import java.io.IOException;

import org.apache.commons.cli.CommandLine;
import org.apache.commons.cli.CommandLineParser;
import org.apache.commons.cli.DefaultParser;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.Options;
import org.benchmarkplayground.benchmarkers.Benchmarker;
import org.benchmarkplayground.benchmarkers.impl.QuickSortBenchmarker;


public class App {

    private static Options getCliOptions() {
        Options options = new Options();

        options.addOption(Option.builder("o")
                .longOpt("operation")
                .hasArg()
                .desc("The operation to be benchmarked.")
                .required(true)
                .build());

        options.addOption(Option.builder("i")
                .longOpt("inputfile")
                .hasArg()
                .desc("The path to a file containing the input data for the benchmarked operation.")
                .required(true)
                .build());

        options.addOption(Option.builder("c")
                .longOpt("count")
                .hasArg()
                .desc("The number of times an operation will be executed over the course of being benchmarked.")
                .type(Integer.class)
                .optionalArg(true)
                .build());

        return options;
    }

    public static void main(String[] args) {
        CommandLineParser parser = new DefaultParser();
        Options options = getCliOptions();


        String operation = null;
        String inputFile = null;
        int count = 1000;
        try {
            CommandLine cmd = parser.parse(options, args);
            operation = cmd.getOptionValue("o");
            inputFile = cmd.getOptionValue("i");
            count = cmd.hasOption("c") ? Integer.parseInt(cmd.getOptionValue("c")) : 1000;
        } catch (Exception e) {
            System.err.println("Error parsing command line arguments: " + e.getMessage());
            HelpFormatter formatter = new HelpFormatter();
            formatter.printHelp("Benchmarker", options);
            System.exit(1);
        }
        
        Benchmarker benchmarker = null;
        switch (operation) {
            case "QuickSort":
                benchmarker = new QuickSortBenchmarker();
                break;
            default:
                // TODO: get list of valid operations dynamically
                System.err.println("Invalid operation passed.");
                System.exit(1);
        }

        try {
            benchmarker.consumeInputFile(inputFile);
        } catch (IOException e) {
            System.out.println("An error occurred while attempting to read file.");
            e.printStackTrace();
        }

        benchmarker.printBenchmarkAnalysis(count);
    }
}
